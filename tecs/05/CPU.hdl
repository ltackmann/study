// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // decode instruction type
    And(a=instruction[15], b=true, out=ctype);

    // for a-instructions use instruction value as input
    // else for c-instructions use aluout as input
    Mux16(a=instruction, b=aluout, sel=ctype, out=aregin);
    
    // for c-instructions when d1 (c[5]) = true then store aluout in A-register 
    // else for a-instructions always store instruction value in A-register 
    And(a=instruction[5], b=ctype, out=storealu);
    Mux(a=true, b=storealu, sel=ctype, out=aload);

    // A register
    ARegister(in=aregin, load=aload, out=aregout, out[0..14]=addressM, out=pcin);

    // use c-instructions a-bit (c[12]) to select between alu input from A-register or memory 
    And(a=instruction[12], b=ctype, out=selectaluin);
    Mux16(a=aregout, b=inM, sel=selectaluin, out=aluy); 

    // for c-instructions store aluout in D-register when d2 (c[4]) = true
    And(a=ctype, b=instruction[4], out=dload);
    
    // D register
    DRegister(in=aluout, load=dload, out=alux);
    
    // ALU control bits corrosponds to the c1-c6 fields of the c instruction
    ALU(x=alux, y=aluy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=eq, ng=lt);

    // for c-instructions store aluout in memory when d3 (c[3]) = true 
    And(a=ctype, b=instruction[3], out=mload);
    Mux(a=false, b=true, sel=mload, out=writeM);

    // determine if aluout is <, >, =, !=, >= or <= zero 
    Not(in=eq, out=neq);
    Not(in=lt, out=nlt);
    // out > 0
    And(a=neq, b=nlt, out=gt);
    // out >= 0
    Or(a=gt, b=eq, out=ge);
    // out != 0
    Or(a=gt, b=lt, out=ne);
    // out <= 0
    Or(a=lt, b=eq, out=le);

    // jump for c-instructions based on j1 (c[2]), j2(c[1]) and j3(c[0]) 
    Mux8Way16(sel=instruction[0..2], a[0]=false, b[0]=gt, c[0]=eq, d[0]=ge, e[0]=lt, f[0]=ne, g[0]=le, h[0]=true, out[0]=jmp);
    Mux(sel=ctype, a=false, b=jmp, out=pcload);

    // increment unless pc-load 
    Mux(sel=pcload, a=true, b=false, out=pcinc);
    
    // PC
    PC(in=pcin, load=pcload, inc=pcinc, reset=reset, out[0..14]=pc);
}


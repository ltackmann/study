// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000–0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications.
 */

CHIP Memory {

    IN  in[16], load, address[15];
    OUT out[16];

    PARTS:
    // we have 2^14 bits for memory 
    // we have 2^13 = 8196bits for screen memory map 
    // we have 1 word at for keyboard memory map

    // 000 000000000000 - 0x0    - memory min 
    // 011 111111111111 - 0x3FFF - memory max
    // 100 000000000000 - 0x4000 - screen min 
    // 101 111111111111 - 0x5FFF - screen max
    // 110 000000000000 - 0x6000 - keyboard  

    // memory   = in, load, address[14] and out
    // keyboard = out
    // screen   = in, load, address[13] and out 

    DMux(sel=address[14], in=load, a=mem-load, b=io-load);

    RAM16K(in=in, load=mem-load, address=address[0..13], out=out-mem);
    Screen(in=in, load=io-load, address=address[0..12], out=out-screen);
    Keyboard(out=out-kb);
    
    // adr MSB combinations: 
    // - memory: 000 001 011 => 00|01
    // - screen: 100 101     => 10
    // - keyboard:110        => 11
    Mux4Way16(sel=address[13..14], a=out-mem, b=out-mem, c=out-screen, d=out-kb, out=out);
}
